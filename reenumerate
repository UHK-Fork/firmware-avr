#!/usr/bin/env node

var usb = require('usb');
var argv = require('minimist')(process.argv.slice(2), {boolean:['w', 'wait']});

// Global constants and variables

var INITIAL_WAIT_INTERVAL = 500    // ms
var WAIT_INTERVAL         = 100;   // ms
var MAX_WAIT_DELAY        = 5000;  // ms

var totalWaitDelay = 0;

enumerationModes = {
    'keyboard'         : 0,
    'bootloader-right' : 1,
    'bootloader-left'  : 2
};

vendorId = 0x16D1;  // TODO: Restore to 0x16D0 for the final prototype.
productIds = [0x05EA, 0x05EB, 0x05EC, 0x05ED];

// Program starts

if (argv._.length != 1) {
    printUsageAndExit();
}

var enumerationMode = enumerationModes[argv._[0]];
var wait = argv.w || argv.wait

if (enumerationMode === undefined) {
    printUsageAndExit();
}

device = findDevice();
if (device) {
    console.log('Keyboard found');
} else {
    console.log('Keyboard not found');
    process.exit(2);
}

device.open();

interfaceNumber = 0;
interface = device.interface(interfaceNumber);
if (interface.isKernelDriverActive()) {
    interface.detachKernelDriver();
}
interface.claim();

sendReenumerateCommand(enumerationMode);

// Function definitions

function printUsageAndExit()
{
    console.log('Usage: reenumerate [ -w | --wait ]  { keyboard | bootloader-left | bootloader-right }');
    process.exit(1);
}

function findDevice()
{
    var device = null;
    for (var i=0; i<productIds.length && !device; i++) {
        device = usb.findByIds(vendorId, productIds[i]);
    }
    return device;
}

function sendReenumerateCommand(enumerationMode)
{
    var AGENT_COMMAND_REENUMERATE = 0;
    sendAgentCommand(AGENT_COMMAND_REENUMERATE, enumerationMode);
}

function sendAgentCommand(command, arg)
{
    console.log('Reenumerating...');
    setReport(new Buffer([command, arg]));
}

function setReport(message)
{
    device.controlTransfer(
        0x21,                     // bmRequestType (constant for this control request)
        0x09,                     // bmRequest (constant for this control request)
        0,                        // wValue (MSB is report type, LSB is report number)
        interfaceNumber,          // wIndex (interface number)
        message,                  // message to be sent
        function(error, data) {   // callback to be executed upon finishing the transfer
            var status = 'Set Report(0x' +  message.toString('hex') + ') sent';
            if (error.errno != 1) {
                console.log('%s - error %j', status, error);
            } else {
                //console.log('%s - success', status);
                if (wait) {
                    setTimeout(function() {
                        setInterval(waitUntilReenumerate, WAIT_INTERVAL);
                    }, INITIAL_WAIT_INTERVAL);
                }
            }
        }
    );
}

function waitUntilReenumerate()
{
    if (findDevice()) {
        console.log('Reenumeration succeeded');
        process.exit(0);
    } else if (totalWaitDelay > MAX_WAIT_DELAY) {
        console.log('Reenumeration failed');
        process.exit(1);
    }
    totalWaitDelay += WAIT_INTERVAL;
}
